name: Strapi Documentation Style Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'docusaurus/docs/**/*.md'
      - 'docusaurus/docs/**/*.mdx'

jobs:
  validate-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd docusaurus
          yarn add --dev js-yaml glob

      - name: Run Strapi 12 Rules validation
        id: validation
        run: |
          cd docusaurus
          node scripts/style-validation/validate-content-style.js --verbose
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const resultsPath = 'docusaurus/style-check-results.json';
              
              if (!fs.existsSync(resultsPath)) {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '## ‚ùå Documentation Style Review Failed\n\nValidation script could not run. Check the logs.'
                });
                return;
              }
              
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              let comment = '## üéØ Strapi Documentation Style Review\n\n';
              comment += `### üìä Summary\n`;
              comment += `- **Files checked:** ${results.summary.filesProcessed}\n`;
              comment += `- **Critical errors:** ${results.issues.errors.length} üö®\n`;
              comment += `- **Warnings:** ${results.issues.warnings.length} ‚ö†Ô∏è\n`;
              comment += `- **Suggestions:** ${results.issues.suggestions.length} üí°\n\n`;
              
              if (results.summary.totalIssues === 0) {
                comment += 'üéâ **Perfect!** Your documentation follows all 12 rules.\n\n';
              } else {
                if (results.issues.errors.length > 0) {
                  comment += '### üö® Critical Issues (must fix)\n\n';
                  results.issues.errors.forEach(error => {
                    const fileName = error.file.replace(/^.*\/docs\//, 'docs/');
                    comment += `**${fileName}:${error.line}** - ${error.message}\n`;
                    if (error.suggestion) comment += `üí° ${error.suggestion}\n`;
                    comment += '\n';
                  });
                }
              }
              
              comment += '---\n*ü§ñ Based on Strapi\'s 12 Rules of Technical Writing*';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              if (results.issues.errors.length > 0) {
                core.setFailed(`Found ${results.issues.errors.length} critical errors.`);
              }
              
            } catch (error) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ‚ùå Error\n\n${error.message}`
              });
            }
