name: Strapi Documentation Style Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'docusaurus/docs/**/*.md'
      - 'docusaurus/docs/**/*.mdx'

jobs:
  validate-documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: 'docusaurus/yarn.lock'

      - name: Install dependencies
        run: |
          cd docusaurus
          yarn add --dev js-yaml glob

      - name: Run Strapi 12 Rules validation
        id: validation
        run: |
          cd docusaurus
          node scripts/style-validation/validate-content-style.js --verbose
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Read validation results
              const resultsPath = 'docusaurus/style-check-results.json';
              
              if (!fs.existsSync(resultsPath)) {
                console.log('No results file found, validation may have failed');
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '## ‚ùå Documentation Style Review\n\n' +
                        'Validation script failed to run. Please check the GitHub Action logs.\n\n' +
                        'This might be due to missing files or configuration issues.'
                });
                return;
              }

              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              // Generate comment
              let comment = '## üéØ Strapi Documentation Style Review\n\n';
              comment += `*Based on Strapi's 12 Rules of Technical Writing*\n\n`;
              
              // Summary
              comment += '### üìä Summary\n';
              comment += `- **Files checked:** ${results.summary.filesProcessed}\n`;
              comment += `- **Total issues:** ${results.summary.totalIssues}\n`;
              comment += `- **Critical errors:** ${results.issues.errors.length} üö®\n`;
              comment += `- **Warnings:** ${results.issues.warnings.length} ‚ö†Ô∏è\n`;
              comment += `- **Suggestions:** ${results.issues.suggestions.length} üí°\n\n`;
              
              if (results.summary.totalIssues === 0) {
                comment += 'üéâ **Perfect!** Your documentation follows all 12 rules of technical writing.\n\n';
              } else {
                // Show critical errors
                if (results.issues.errors.length > 0) {
                  comment += '### üö® Critical Issues (must fix)\n\n';
                  results.issues.errors.slice(0, 5).forEach(error => {
                    const fileName = error.file.replace(/^.*\/docs\//, 'docs/');
                    comment += `**${fileName}:${error.line}**\n`;
                    comment += `- ${error.message}\n`;
                    if (error.suggestion) {
                      comment += `- üí° *${error.suggestion}*\n`;
                    }
                    comment += '\n';
                  });
                  
                  if (results.issues.errors.length > 5) {
                    comment += `*... and ${results.issues.errors.length - 5} more critical issues*\n\n`;
                  }
                }
                
                // Show some warnings
                if (results.issues.warnings.length > 0) {
                  comment += '### ‚ö†Ô∏è Warnings (should address)\n\n';
                  results.issues.warnings.slice(0, 3).forEach(warning => {
                    const fileName = warning.file.replace(/^.*\/docs\//, 'docs/');
                    comment += `**${fileName}:${warning.line}** - ${warning.message}\n`;
                  });
                  
                  if (results.issues.warnings.length > 3) {
                    comment += `\n*... and ${results.issues.warnings.length - 3} more warnings*\n`;
                  }
                  comment += '\n';
                }
                
                // Show some suggestions
                if (results.issues.suggestions.length > 0) {
                  comment += '### üí° Suggestions (improvements)\n\n';
                  results.issues.suggestions.slice(0, 2).forEach(suggestion => {
                    const fileName = suggestion.file.replace(/^.*\/docs\//, 'docs/');
                    comment += `**${fileName}:${suggestion.line}** - ${suggestion.message}\n`;
                  });
                  
                  if (results.issues.suggestions.length > 2) {
                    comment += `\n*... and ${results.issues.suggestions.length - 2} more suggestions*\n`;
                  }
                  comment += '\n';
                }
              }
              
              // Add footer
              comment += '---\n';
              comment += '*ü§ñ Automated review based on [Strapi\'s 12 Rules of Technical Writing](https://strapi.notion.site/12-Rules-of-Technical-Writing)*\n';
              
              // Post comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
              // Set step output for potential failure
              if (results.issues.errors.length > 0) {
                core.setFailed(`Found ${results.issues.errors.length} critical errors that must be fixed.`);
              }
              
            } catch (error) {
              console.error('Error processing results:', error);
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## ‚ùå Documentation Style Review Failed\n\n' +
                      'There was an error running the style validation. Please check the GitHub Action logs.\n\n' +
                      `Error: ${error.message}`
              });
            }
